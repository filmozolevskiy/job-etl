# CI Pipeline for Job-ETL Project
# This workflow runs on every push and pull request to ensure code quality
name: CI Pipeline

# Trigger conditions
on:
  push:
    branches:
      - main
      - 'feature/**'
      - 'bugfix/**'
  pull_request:
    branches:
      - main

# Cancel in-progress workflows when a new push is made to the same branch
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Job 1: Lint Python code with Ruff
  lint:
    name: Lint Python Code
    runs-on: ubuntu-latest
    
    steps:
      # Step 1: Check out the repository code
      - name: Checkout code
        uses: actions/checkout@v4
      
      # Step 2: Set up Python environment
      - name: Set up Python 3.9
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'
          cache: 'pip'  # Cache pip dependencies for faster runs
      
      # Step 3: Install Ruff
      - name: Install Ruff
        run: pip install ruff
      
      # Step 4: Run Ruff linter
      - name: Run Ruff linter
        run: |
          echo "🔍 Running Ruff linter..."
          ruff check . --output-format=github || {
            echo "::error::Ruff linting failed. Please review and fix the errors shown above."
            exit 1
          }
      
      # Step 5: Run Ruff formatter check (disabled for MVP - can re-enable later)
      # - name: Check code formatting
      #   run: |
      #     echo "📝 Checking code formatting..."
      #     ruff format --check .

  # Job 2: Run Python tests with pytest
  test:
    name: Run Python Tests
    runs-on: ubuntu-latest
    needs: lint  # Wait for linting to pass before running tests
    
    # Use a service container for PostgreSQL (needed for integration tests)
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: airflow
          POSTGRES_PASSWORD: airflow
          POSTGRES_DB: job_etl
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
      # Step 1: Check out the repository code
      - name: Checkout code
        uses: actions/checkout@v4
      
      # Step 2: Set up Python environment
      - name: Set up Python 3.9
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'
          cache: 'pip'
      
      # Step 3: Install test dependencies
      - name: Install test dependencies
        run: |
          echo "📦 Installing test dependencies..."
          pip install pytest pytest-cov pytest-asyncio
          pip install psycopg2-binary sqlalchemy
      
      # Step 4: Run pytest with coverage
      - name: Run pytest
        env:
          # Database connection for integration tests
          DATABASE_URL: postgresql://airflow:airflow@localhost:5432/job_etl
          # Add project root to Python path so services can be imported
          PYTHONPATH: .
        run: |
          echo "🧪 Running pytest..."
          # Check if services directory has Python files
          if [ -d "services" ] && [ "$(find services -name '*.py' -not -path '*/\.*' 2>/dev/null | wc -l)" -gt 0 ]; then
            # Services exist, run with coverage and strict requirements
            pytest tests/ --cov=services --cov-report=xml --cov-report=term-missing --cov-fail-under=0 -v --tb=short || {
              echo "::error::Pytest failed. Please review the test failures above and fix the code or tests."
              exit 1
            }
          else
            # No services yet, run tests without coverage requirements
            echo "⚠️  No service code found, running tests without coverage"
            pytest tests/ -v --tb=short || echo "⚠️  No tests found yet - this is expected for initial setup"
          fi
      
      # Step 4b: Generate test failure summary
      - name: Generate test summary
        if: failure()
        run: |
          echo "## ❌ Test Failures" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Tests have failed. Next steps:" >> $GITHUB_STEP_SUMMARY
          echo "1. Read the pytest output above" >> $GITHUB_STEP_SUMMARY
          echo "2. Identify failing tests and error messages" >> $GITHUB_STEP_SUMMARY
          echo "3. Fix the code to make tests pass" >> $GITHUB_STEP_SUMMARY
          echo "4. Re-run CI to verify fixes" >> $GITHUB_STEP_SUMMARY
      
      # Step 5: Upload coverage report to GitHub
      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        if: always()  # Upload even if tests fail
        with:
          name: coverage-report
          path: |
            htmlcov/
            coverage.xml
          retention-days: 30

  # Job 3: Validate dbt models
  dbt-check:
    name: Validate dbt Models
    runs-on: ubuntu-latest
    needs: lint  # Can run in parallel with tests
    
    # Use PostgreSQL for dbt compile/test
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: airflow
          POSTGRES_PASSWORD: airflow
          POSTGRES_DB: job_etl
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
      # Step 1: Check out the repository code
      - name: Checkout code
        uses: actions/checkout@v4
      
      # Step 2: Set up Python environment
      - name: Set up Python 3.9
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'
          cache: 'pip'
      
      # Step 3: Install dbt with compatible protobuf version
      - name: Install dbt
        run: |
          echo "📦 Installing dbt..."
          pip install "protobuf>=3.20,<5" dbt-core==1.7.4 dbt-postgres==1.7.4
      
      # Step 4: Set up dbt profiles
      - name: Configure dbt profiles
        run: |
          echo "⚙️  Configuring dbt..."
          mkdir -p ~/.dbt
          cat > ~/.dbt/profiles.yml << 'EOF'
          job_dbt:
            target: ci
            outputs:
              ci:
                type: postgres
                host: localhost
                user: airflow
                password: airflow
                port: 5432
                dbname: job_etl
                schema: public
                threads: 4
          EOF
      
      # Step 5: Create database schemas
      - name: Initialize database schemas
        env:
          PGPASSWORD: airflow
        run: |
          echo "🗄️  Creating database schemas..."
          psql -h localhost -U airflow -d job_etl -c "CREATE SCHEMA IF NOT EXISTS raw;"
          psql -h localhost -U airflow -d job_etl -c "CREATE SCHEMA IF NOT EXISTS staging;"
          psql -h localhost -U airflow -d job_etl -c "CREATE SCHEMA IF NOT EXISTS marts;"
      
      # Step 6: Install dbt dependencies
      - name: Install dbt packages
        working-directory: dbt/job_dbt
        run: |
          echo "📦 Installing dbt packages..."
          dbt deps --profiles-dir ~/.dbt
      
      # Step 7: Compile dbt models
      - name: Compile dbt models
        working-directory: dbt/job_dbt
        run: |
          echo "🔨 Compiling dbt models..."
          dbt compile --profiles-dir ~/.dbt || {
            echo "::error::dbt compilation failed. Please fix the SQL syntax or model configuration errors shown above."
            exit 1
          }
      
      # Step 8: Run dbt tests
      - name: Run dbt tests
        working-directory: dbt/job_dbt
        run: |
          echo "🧪 Running dbt tests..."
          # For now, just parse - we'll add data tests later
          dbt parse --profiles-dir ~/.dbt
          echo "✅ dbt models validated successfully!"

  # Job 4: Summary job (always runs, reports overall status)
  ci-summary:
    name: CI Summary
    runs-on: ubuntu-latest
    needs: [lint, test, dbt-check]
    if: always()  # Run even if previous jobs fail
    
    steps:
      - name: Check CI status
        run: |
          echo "## CI Pipeline Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Lint | ${{ needs.lint.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Test | ${{ needs.test.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| dbt Check | ${{ needs.dbt-check.result }} |" >> $GITHUB_STEP_SUMMARY
          
          # Fail if any job failed
          if [[ "${{ needs.lint.result }}" == "failure" ]] || \
             [[ "${{ needs.test.result }}" == "failure" ]] || \
             [[ "${{ needs.dbt-check.result }}" == "failure" ]]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "❌ **CI Pipeline Failed**" >> $GITHUB_STEP_SUMMARY
            exit 1
          else
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "✅ **CI Pipeline Passed**" >> $GITHUB_STEP_SUMMARY
          fi

