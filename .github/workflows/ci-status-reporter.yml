# CI Status Reporter - Posts status to commit comments for AI agent to read
name: CI Status Reporter

on:
  workflow_run:
    workflows: ["CI Pipeline"]
    types:
      - completed

permissions:
  contents: read
  actions: read
  statuses: write

jobs:
  report-status:
    name: Report CI Status
    runs-on: ubuntu-latest
    
    steps:
      - name: Post CI status to commit
        uses: actions/github-script@v7
        with:
          script: |
            const runId = context.payload.workflow_run.id;
            const conclusion = context.payload.workflow_run.conclusion;
            const sha = context.payload.workflow_run.head_sha;
            const runUrl = context.payload.workflow_run.html_url;
            
            // Get all jobs for this run
            const { data: jobs } = await github.rest.actions.listJobsForWorkflowRun({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: runId
            });
            
            let status = conclusion === 'success' ? '✅ **CI Pipeline Passed**' : '❌ **CI Pipeline Failed**';
            let message = `${status}\n\n`;
            message += `**Workflow Run:** ${runUrl}\n`;
            message += `**Commit:** ${sha.substring(0, 7)}\n`;
            message += `**Branch:** ${context.payload.workflow_run.head_branch}\n\n`;
            
            message += '## Jobs Summary\n\n';
            
            for (const job of jobs.jobs) {
              const icon = job.conclusion === 'success' ? '✅' : 
                          job.conclusion === 'failure' ? '❌' : 
                          job.conclusion === 'skipped' ? '⏭️' : '⚠️';
              
              message += `${icon} **${job.name}** (${job.conclusion})\n`;
              
              if (job.conclusion === 'failure') {
                const failedSteps = job.steps.filter(s => s.conclusion === 'failure');
                if (failedSteps.length > 0) {
                  message += '  Failed steps:\n';
                  for (const step of failedSteps) {
                    message += `  - ${step.name}\n`;
                  }
                }
                message += `  [View logs](${job.html_url})\n`;
              }
              
              message += '\n';
            }
            
            message += `---\n*Posted at ${new Date().toISOString()}*`;
            
            // Create commit comment
            await github.rest.repos.createCommitComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              commit_sha: sha,
              body: message
            });
            
            // Also create a commit status
            await github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: sha,
              state: conclusion === 'success' ? 'success' : 'failure',
              context: 'CI Pipeline Summary',
              description: conclusion === 'success' ? 'All checks passed' : 'Some checks failed',
              target_url: runUrl
            });

